{"version":3,"sources":["intemporal/workflow.cljc"],"mappings":"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","names":["intemporal.workflow/current-env","js/Error","intemporal.workflow.internal/*env*","intemporal.workflow/workflow-id","intemporal$workflow$ITaskExecutor$submit$dyn","x__5373__auto__","m__5374__auto__","intemporal.workflow/submit","goog/typeOf","m__5372__auto__","cljs.core/missing-protocol","intemporal$workflow$ITaskExecutor$shutdown$dyn","intemporal.workflow/shutdown","intemporal$workflow$ITaskExecutor$running_QMARK_$dyn","intemporal.workflow/running?","intemporal.workflow/ITaskExecutor","this","f","grace-period-ms","intemporal.workflow/make-task-executor","run?","cljs.core.atom","intemporal.workflow/t_intemporal$workflow56790","_","cljs.core/deref","promesa.core/vthread-call","cljs.core/reset!","p__56793","map__56794","cljs.core/--destructure-map","cljs.core.get","intemporal.workflow/worker-execute-fn","store","protocols","type","id","root","task","task-counter","shutting-down?","runtime","base-env","or__5025__auto__","cljs.core.swap_BANG_","cljs.core/inc","internal-env","cljs.core.merge","intemporal.workflow.internal/default-env","*env*-orig-val__56795","*env*-temp-val__56796","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-call-filter*","__inst","js/Date","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__52369__auto__","cljs.core/Delay","signal__52360__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","taoensso.telemere.impl/signal-msg","temp__5823__auto__","taoensso.telemere/*xfn*","xfn__52361__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","intemporal.workflow.internal/resume-task","intemporal.workflow/worker-poll-fn","task-executor","polling-ms","promesa.core.create","resolve-fn-56801","reject-fn-56800","loop-fn-56797","promesa.core.fnly","res-56798","err-56799","promesa.core/recur?","promesa.exec.run_BANG_","promesa.exec/wrap-bindings","promesa.protocols/-mcat","promesa.protocols/-promise","___49963__auto__","promesa.core.delay","promesa.core.chain","temp__5825__auto__","intemporal.store/dequeue-task","signal__52359__auto__","cljs.core/reduce-kv","cljs.core/assoc","cljs.core/not","promesa.core/->Recur","var_args","G__56806","intemporal.workflow/start-poller!","args-arr__5774__auto__","len__5749__auto__","i__5750__auto__","argseq__5775__auto__","cljs.core/IndexedSeq","p__56807","map__56808","p__56809","map__56810","seq56803","G__56804","cljs.core/first","cljs.core/next","G__56805","self__5734__auto__","opts","intemporal.workflow.start_poller_BANG_","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","polling-fn","G__56815","intemporal.workflow/start-worker!","p__56816","map__56817","seq56813","G__56814","intemporal.workflow.start_worker_BANG_","resolve-fn-56822","reject-fn-56821","loop-fn-56818","res-56819","err-56820","p__56823","map__56824","intemporal.workflow/enqueue-and-wait","intemporal.workflow.internal/enqueue-and-wait","intemporal.workflow/add-compensation","thunk","cljs.core/ifn?","cljs.core/conj","intemporal.workflow/compensate","thunks","seq__56825","cljs.core/seq","chunk__56826","count__56827","i__56828","cljs.core/chunked-seq?","c__5548__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/pop"],"sourcesContent":["(ns intemporal.workflow\n  (:require [intemporal.store :as store]\n            [intemporal.workflow.internal :as internal]\n            [promesa.core :as p]\n            [taoensso.telemere :as t])\n  #?(:cljs (:require-macros\n             #_:clj-kondo/ignore\n             [intemporal.workflow.internal :refer [with-env-internal]]\n             [intemporal.workflow :refer [with-env]]))\n  #?(:clj (:import [java.util.concurrent ExecutorService Executors TimeUnit])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;;;;\n;; logging/tracing\n\n\n;;;;\n;; runtime\n\n(defmacro with-env\n  \"Creates a new environment for workflow execution. Options:\n  - :timeout-ms \"\n  [m & body]\n  `(internal/with-env-internal ~m ~@body))\n\n(defn current-env\n  \"Returns the workflow execution environment for the current thread\"\n  []\n  (assert (some? internal/*env*) \"No workflow env detected, should only be called within a workflow function\")\n  internal/*env*)\n\n(defn workflow-id\n  \"Returns the current workflow uuid\"\n  []\n  (assert (some? internal/*env*) \"No workflow env detected, should only be called within a workflow function\")\n  (-> internal/*env* :root))\n\n;;;;\n;; worker\n(defprotocol ITaskExecutor\n  (submit [this f] \"Submits the function `f` for execution\")\n  (shutdown [this grace-period-ms] \"Shuts down the task executor\")\n  (running? [this] \"Indicates if the executor is running\"))\n\n;; make sure that any given executor service can implement ITaskExecutor\n#?(:clj (extend-type ExecutorService\n          ITaskExecutor\n          (submit [executor f]\n            (.submit ^ExecutorService executor ^Runnable f))\n          (shutdown [executor grace-period-ms]\n            ;; todo: release tasks\n            (.shutdown ^ExecutorService executor)\n            (when-not (.awaitTermination ^ExecutorService executor grace-period-ms TimeUnit/MILLISECONDS)\n              (.shutdownNow ^ExecutorService executor)))\n          (running? [executor]\n            (not (.isShutdown ^ExecutorService executor)))))\n\n(defn make-task-executor\n  \"Creates an object that satisfies `ITaskExecutor`.\"\n  []\n  (let [run? (atom true)]\n    #?(:cljs\n       (reify ITaskExecutor\n         (submit [_ f]\n           (when @run?\n             (p/vthread (f))))\n         (shutdown [_ grace-period-ms]\n           (reset! run? false))\n         (running? [_] @run?))\n       :clj\n       (Executors/newVirtualThreadPerTaskExecutor))))\n\n(defn- worker-execute-fn\n  \"Executes a given protocol, activity or workflow `task`\"\n  [store protocols {:keys [type id root] :as task} task-counter shutting-down?]\n  (let [runtime      (:runtime task)\n        base-env     {:store     store\n                      :type      type\n                      :ref       id\n                      :id        id\n                      :root      (or root id)\n                      :protos    protocols\n                      ;; TODO use uuid\n                      :next-id   (fn [] (str (or root id) \"-\" (swap! task-counter inc)))\n                      :shutdown? shutting-down?}\n        internal-env (merge internal/default-env base-env runtime)]\n    ;; root task: we only enqueue workflows\n    (with-env internal-env\n      (t/log! {:level :debug :data {:sym (:sym task) :env internal-env}} [\"Resuming task with id\" (:id task)])\n      (internal/resume-task internal-env store protocols task))))\n\n(defn- worker-poll-fn\n  \"Continously polls for task while `task-executor` is active.\"\n  [store protocols task-executor polling-ms]\n  (let [task-counter (atom 0)]\n    #_{:clj-kondo/ignore [:loop-without-recur :invalid-arity]}\n    (p/loop []\n      (-> (p/delay polling-ms)\n          (p/chain (fn [_]\n                     (loop []\n                       (when-let [task (store/dequeue-task store)]\n                         (t/log! {:level :debug :_data {:task task}} [\"Dequeued task with id\" (:id task)])\n                         (submit task-executor (fn [] (worker-execute-fn store protocols task task-counter (fn [] (not (running? task-executor))))))\n                         (recur)))\n                     (when (running? task-executor)\n                       (p/recur))))))))\n\n(defn start-poller!\n  \"Starts a poller that will submit tasks to the `task-executor`.\n  Protocol implementations are resolved via a map of `:protocols {my.ns Impl}`\n  Returns an `ITaskExecutor` that can be shutdown.\n  For clj runtimes, task-executor should be `(Executors/newVirtualThreadPerTaskExecutor)`, as\n  each execution will be blocked while they await for a given task dependencie's execution.\"\n  ([store {:keys [protocols polling-ms] :or {protocols {} polling-ms 100} :as opts}]\n   (start-poller! store (make-task-executor) opts))\n  ([store task-executor & {:keys [protocols polling-ms] :or {protocols {} polling-ms 100}}]\n   (assert (satisfies? ITaskExecutor task-executor) \"Supplied task executor does not satisfy ITaskExecutor\")\n   (let [polling-fn (fn [] (worker-poll-fn store protocols task-executor polling-ms))]\n     (submit task-executor polling-fn))\n   task-executor))\n\n(defn start-worker!\n  \"Starts a single worker thread that periodically polls for tasks and executes them in a\n  separate thread. Mostly used for testing purposes.\"\n  ([store]\n   (start-worker! store {}))\n  ([store & {:keys [protocols polling-ms] :or {protocols {} polling-ms 100}}]\n   (let [run?         (atom true)\n         task-counter (atom 0)]\n     (p/vthread\n       #_{:clj-kondo/ignore [:loop-without-recur :invalid-arity]}\n       (p/loop []\n         (-> (p/delay polling-ms)\n             (p/chain (fn [_]\n                        (when-let [task (store/dequeue-task store)]\n                          (t/log! {:level :debug :data {:sym (:sym task)}} [\"Dequeued task with id\" (:id task)])\n                          (p/vthread\n                            (worker-execute-fn store protocols task task-counter (fn [] (not @run?)))))\n                        (when @run?\n                          (p/recur)))))))\n     (fn [] (reset! run? false)))))\n\n(defn enqueue-and-wait\n  [{:keys [store] :as opts} task]\n  (t/log! {:level :debug :data {:sym (:sym task)}} [\"Enqueuing task with id\" (:id task)])\n  (internal/enqueue-and-wait opts task))\n\n(defn add-compensation\n  \"Adds a compensation action to the current workflow.\"\n  [thunk]\n  (assert (ifn? thunk) \"Compensation action should implement IFn\")\n  (swap! (:compensations internal/*env*) conj thunk))\n\n(defn compensate\n  \"Runs compensation in program order. A failure of the compensation action will stop running other compensations.\"\n  []\n  (let [thunks (-> internal/*env* :compensations)]\n    (doseq [f @thunks]\n      (swap! thunks pop)\n      (f))))"]}