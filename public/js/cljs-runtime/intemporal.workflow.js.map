{"version":3,"sources":["intemporal/workflow.cljc"],"mappings":"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","names":["intemporal.workflow/*env*","intemporal.workflow/default-env","cljs.core.atom","js/Number","var_args","G__32195","intemporal.workflow/start-worker!","js/Error","store","intemporal.workflow.start_worker_BANG_","cljs.core/constantly","worker-protos","promesa.core/vthread-call","p1__32193#","task-ready?","cljs.core._EQ_","env","intemporal.store/watch-tasks","_","temp__5804__auto__","map__32196","cljs.core/--destructure-map","cljs.core.get","type","id","task","intemporal.store/dequeue-task","map__32198","last-root","protos","*env*-orig-val__32199","*env*-temp-val__32200","cljs.core.merge","or__5045__auto__","intemporal.workflow.internal/resume-task","p__32201","map__32202","intemporal.workflow/enqueue-and-wait","opts","intemporal.workflow.internal/enqueue-and-wait","intemporal.workflow/add-compensation","thunk","cljs.core/ifn?","cljs.core.swap_BANG_","cljs.core/conj","intemporal.workflow/compensate","thunks","cljs.core/deref","seq__32204","cljs.core/seq","chunk__32205","count__32206","i__32207","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","f"],"sourcesContent":["(ns intemporal.workflow\n  (:require [intemporal.store :as store]\n            [intemporal.workflow.internal :as internal]\n            [promesa.core :as promesa])\n  #?(:cljs (:require-macros [intemporal.workflow :refer [with-env]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;;;;\n;; runtime\n\n(def ^:dynamic *env* nil)\n(def default-env {:compensations (atom [])\n                  :timeout-ms #?(:clj Long/MAX_VALUE\n                                 :cljs (.-MAX_SAFE_INTEGER js/Number))})\n\n(defmacro with-env [m & body]\n  `(binding [*env* (merge default-env ~m)]\n     (do ~@body)))\n\n\n;;;;\n;; worker\n\n(defn start-worker!\n  \"Starts a worker thread.\"\n  ([store]\n   (start-worker! store (constantly false)))\n  ([store worker-protos]\n   (promesa/vthread\n     (let [task-ready? #(= :new (:state %))\n           env *env*]\n       (store/watch-tasks store\n                          task-ready?\n                          (fn [_]\n                            ;; the store should handle dequeing atomically\n                            (when-let [{:keys [type id] :as task} (store/dequeue-task store)]\n                              (let [{last-root :root protos :protos} env]\n                                ;; run in a new thread to avoid deadlocks\n                                (promesa/vthread\n                                  (with-env {:store store\n                                             :type  type\n                                             :ref   id\n                                             :root  (or last-root id)\n                                             :protos (or protos worker-protos)}\n                                    (internal/resume-task store worker-protos task)))))))))))\n\n(defn enqueue-and-wait\n  [{:keys [store] :as opts} task]\n  (internal/enqueue-and-wait opts task))\n\n(defn add-compensation\n  \"Adds a compensation action to the current workflow.\"\n  [thunk]\n  (assert (ifn? thunk) \"Compensation action should implement IFn\")\n  (swap! (:compensations *env*) conj thunk))\n\n(defn compensate\n  \"Runs compensation in program order. A failure of the compensation action will stop running other compensations.\"\n  []\n  (let [thunks (-> *env* :compensations deref)]\n    (doseq [f thunks]\n      (f))))"]}