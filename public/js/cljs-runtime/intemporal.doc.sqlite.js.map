{"version":3,"sources":["intemporal/doc/sqlite.cljc"],"mappings":"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","names":["var_args","G__33496","intemporal.doc.sqlite/run","js/Error","db","stmt","argv","cljs.core/clj->js","intemporal.doc.sqlite/exec","intemporal.doc.sqlite/execute!","stmt+params","cljs.core/first","params","or__5045__auto__","cljs.core/rest","s","_","res","temp__5802__auto__","cljs.core.conj","cljs.core.js__GT_clj","clojure.walk/keywordize-keys","intemporal.doc.sqlite/execute-one!","temp__5804__auto__","intemporal.doc.sqlite/migrate","scripts","js/Promise.all","p1__33506#","cljs.core.map","js/window","proms","p1__33507#","texts","seq__33511","cljs.core/seq","chunk__33512","count__33513","i__33514","vec__33546","cljs.core.nth","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__33549","cljs.core/next","resource","script","cljs.core/vector","js/console.info","intemporal.doc.sqlite.run","intemporal.doc.sqlite/bootstrap","SQL","intemporal.doc.sqlite/init","callback","cfg","f"],"sourcesContent":["(ns intemporal.doc.sqlite\n  (:require [clojure.walk :as w]))\n\n;; uses https://github.com/sql-js/sql.js\n\n(defn run\n  ([db stmt] (.run db stmt))\n  ([db stmt argv] (.run db stmt (clj->js argv))))\n\n(defn exec [db stmt]\n  (.exec db stmt))\n\n;; lets emulate jdbc api\n(defn execute!\n  [db stmt+params]\n  (let [stmt   (first stmt+params)\n        params (or (rest stmt+params) [])\n        s      (.prepare db stmt)\n        _      (.bind s (clj->js params))]\n    (try\n      (loop [res []]\n        (if-let [_ (.step s)]\n          (recur (conj res (-> (.getAsObject s)\n                               (js->clj)\n                               (w/keywordize-keys))))\n          res))\n      (finally\n        (.free s)))))\n(defn execute-one!\n  [db stmt+params]\n  (let [stmt (first stmt+params)\n        params (or (rest stmt+params) [])\n        s (.prepare db stmt)\n        _ (.bind s (clj->js params))]\n    (try\n      (when-let [_ (.step s)]\n        (-> (.getAsObject s)\n            (js->clj)\n            (w/keywordize-keys)))\n      (finally\n        (.free s)))))\n\n\n(defn migrate [db scripts]\n  (-> (js/Promise.all (clj->js (map #(.fetch js/window %) scripts)))\n      (.then (fn [proms] (js/Promise.all (clj->js (map #(.text %) proms)))))\n      (.then (fn [texts]\n               (doseq [[resource script] (map vector scripts texts)]\n                 (js/console.info \"Running script\" resource)\n                 (run db script))))))\n\n(defn bootstrap [SQL]\n  (let [db (new (. SQL -Database))\n        scripts [\"resources/migrations/20220916152129-metadata.up.sql\"\n                 \"resources/migrations/20220916152135-events.up.sql\"]]\n    (-> (migrate db scripts)\n        (.then (fn [_] db)))))\n\n(defn init [callback]\n  (let [cfg (clj->js {\"locateFile\" (fn [f] (str \"https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/\" f))})]\n    (-> (.initSqlJs js/window cfg)\n        (.then bootstrap)\n        (.then callback))))\n"]}