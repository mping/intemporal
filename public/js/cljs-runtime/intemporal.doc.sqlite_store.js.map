{"version":3,"sources":["intemporal/doc/sqlite_store.cljc"],"mappings":"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","names":["var_args","G__27595","intemporal.doc.sqlite-store/serialize","js/Error","obj","cljs.core.pr_str","etype","cljs.core._EQ_","js/module$node_modules$serialize_error$index.serializeError","G__27654","intemporal.doc.sqlite-store/deserialize","s","clojure.edn.read_string","js/module$node_modules$serialize_error$index.deserializeError","p__27684","map__27690","cljs.core/--destructure-map","cljs.core.get","intemporal.doc.sqlite-store/persist-event","db","_wid","runid","type","uid","payload","evt","query","intemporal.doc.sqlite/execute-one!","intemporal.doc.sqlite_store.serialize","js/Date","p__27709","map__27712","intemporal.doc.sqlite-store/event->event-map","id","_run","deleted","timestamp","dbevt","cljs.core.keyword","cljs.core.symbol","intemporal.doc.sqlite_store.deserialize","intemporal.doc.sqlite-store/truncate","table","cljs.core/name","cljs.core.ex_info","intemporal.doc.sqlite-store/resolve'","intemporal.doc.sqlite-store/make-sqlite-store","js/intemporal","js/intemporal.doc","js/intemporal.doc.sqlite-store","js/intemporal.doc.sqlite-store.t_intemporal$doc$sqlite_store27749","intemporal.doc.sqlite-store/t_intemporal$doc$sqlite_store27749","_27751","meta27750","cljs.core/PROTOCOL_SENTINEL","p__27863","map__27864","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","intemporal.doc.sqlite-store/->t_intemporal$doc$sqlite_store27749","this","temp__5804__auto__","map__27841","map__27844","var","map__27848","map__27853","events","intemporal.doc.sqlite/execute!","cljs.core.mapv","all?","map__27871","map__27875","eventsq","cljs.core.comp","cljs.core/parse-uuid","wid","evtid","all-events","e","cljs.core.assoc","sb__5690__auto__","goog.string/StringBuffer","*print-newline*-orig-val__27804","cljs.core/*print-newline*","*print-fn*-orig-val__27805","cljs.core/*print-fn*","*print-newline*-temp-val__27806","*print-fn*-temp-val__27807","x__5691__auto__","cljs.pprint.print_table","*print-newline*-orig-val__27878","*print-fn*-orig-val__27879","*print-newline*-temp-val__27880","*print-fn*-temp-val__27881","fvar","aid","data"],"sourcesContent":["(ns intemporal.doc.sqlite-store\n  (:require [clojure.edn :as edn]\n            [clojure.pprint :as pprint]\n            [intemporal.doc.sqlite :as sqlite]\n            [intemporal.store :as s]\n            #?(:cljs [\"serialize-error\" :as serde-error])))\n\n\n(defn- serialize\n  ([obj]\n   (pr-str obj))\n  ([obj etype]\n   #?(:clj  (pr-str obj)\n      :cljs (if (or (= :intemporal.activity/failure etype)\n                    (= :intemporal.workflow/failure etype))\n              (pr-str (serde-error/serializeError obj))\n              (pr-str obj)))))\n\n(defn- deserialize\n  ([s]\n   (edn/read-string s))\n  ([s etype]\n   #?(:clj  (edn/read-string s)\n      :cljs (if (or (= :intemporal.activity/failure etype)\n                    (= :intemporal.workflow/failure etype))\n              (serde-error/deserializeError (edn/read-string s))\n              (edn/read-string s)))))\n\n;#?(:cljs (println (serde-error/deserializeError (serde-error/serializeError (js/Error)))))\n\n(defn- persist-event [db _wid runid {:keys [type uid payload] :as evt}]\n  (let [query (str \"insert into events \"\n                   \"(runid, type, uid, payload, deleted, timestamp)\"\n                   \"values (?, ?, ?, ?, ?, ?)\")]\n    (sqlite/execute-one! db [query (str runid) (serialize type) uid (serialize payload type) false (.toUTCString (js/Date.))])))\n\n(defn event->event-map [{:keys [id _run type uid payload deleted timestamp] :as dbevt}]\n  (when (some? dbevt)\n    (let [etype (keyword (.substring type 1))]\n      {:id        id\n       :type      etype\n       :uid       (symbol uid)\n       :payload   (deserialize payload etype)\n       :timestamp (js/Date. timestamp)\n       :deleted?  (not (or (nil? deleted) (zero? deleted)))})))\n\n\n(defn- truncate [db table]\n  (cond\n    (= \"metadata\" (name table)) (sqlite/execute-one! db [\"delete from metadata\"])\n    (= \"events\" (name table)) (sqlite/execute-one! db [\"delete from events\"])\n    :else (throw (ex-info (str \"Unknown table: \" table) {}))))\n\n(defn resolve' [s]\n  ;; TODO fixme\n  s)\n\n;; adapted from intemporal.store.sql\n(defn- make-sqlite-store [db]\n  (reify\n    cljs.core/IDeref\n    (-deref [this] this)\n\n    s/WorkflowStore\n    (id [this]\n      \"sqlite-store\")\n    (clear [this]\n      (truncate db :metadata)\n      (truncate db :events))\n\n    ;; main stuff\n    (find-workflow [this runid]\n      (when-let [{uid  :uid\n                  type :type} (sqlite/execute-one! db [\"select uid,type from events where runid=? order by timestamp asc limit 1\" (str runid)])]\n        (let [ {var :var} (sqlite/execute-one! db [\"select var from metadata where type=? and uid=?\" \"workflow\" uid])]\n          [(symbol uid) (resolve' (symbol var))])))\n\n    ;; queries\n    (find-workflow-run [this runid]\n      (when-let [{uid  :uid\n                  type :type} (sqlite/execute-one! db [\"select uid,type from events where runid=? order by timestamp asc limit 1\" (str runid)])]\n        (let [{var :var} (sqlite/execute-one! db [\"select var from metadata where type=? and uid=?\" \"workflow\" uid])\n              events (sqlite/execute! db [\"select * From events where runid=?\" (str runid)])]\n          {:workflow        (resolve' (symbol var))\n           :workflow-events (mapv event->event-map events)})))\n\n    (find-workflow-run [this runid {:keys [all?] :or {all? true}}]\n      (when-let [{uid  :uid\n                  type :type} (sqlite/execute-one! db [\"select uid,type from events where runid=? order by timestamp asc limit 1\" (str runid)])]\n        (let [{var :var} (sqlite/execute-one! db [\"select var from metadata where type=? and uid=?\" \"workflow\" uid])\n              eventsq (if all?\n                        \"select * From events where runid=?\"\n                        \"select * From events where runid=? and (deleted is false or deleted is null)\")\n              events  (sqlite/execute! db [eventsq (str runid)])]\n          {:workflow        (resolve' (symbol var))\n           :workflow-events (mapv event->event-map events)})))\n    (list-workflow-runs [this]\n      (->> (sqlite/execute! db [\"select distinct runid from events\"])\n           (mapv (comp parse-uuid :runid))))\n    (list-workflow-runs [this wid]\n      (->> (sqlite/execute! db [\"select distinct runid from events where uid=?\" (str wid)])\n           (mapv (comp parse-uuid :runid))))\n\n    ;; event handling\n    (clear-events [this]\n      (truncate db :events))\n    (next-event [this wid runid]\n      (->> (sqlite/execute-one! db [(str \"select * from events where runid=? and (deleted is false or deleted is null) \"\n                                         \"order by id asc limit 1\")\n                                    (str runid)])\n           (event->event-map)))\n    (next-event [this wid runid evtid]\n      (->> (sqlite/execute-one! db [(str \"select * from events where runid=? and (deleted is false or deleted is null) \"\n                                         \"and id > ? order by id asc limit 1\")\n                                    (str runid) evtid])\n           (event->event-map)))\n    (expunge-events [this wid runid evtid]\n      ;; soft delete from workflow events\n      ;; where id > evtid\n      (sqlite/execute! db [\"update events set deleted=true where runid=? and id > ?\" (str runid) evtid]))\n\n    (events->table [this]\n      (let [all-events (->> (sqlite/execute! db [\"select * from events order by runid asc, timestamp asc\"])\n                            (mapv (fn [e] (assoc e :payload (deserialize (:payload e))))))]\n        (with-out-str\n          (pprint/print-table all-events))))\n    (registrations->table [this]\n      (with-out-str\n        (pprint/print-table (sqlite/execute! db [\"select * from metadata\"]))))\n\n\n    ;; metadata\n    (save-workflow-definition [this wid fvar]\n      (sqlite/execute-one! db [\"insert into metadata(uid,var,type) values(?,?,?)\" (str wid) (symbol fvar) \"workflow\"]))\n\n    (save-activity-definition [this aid fvar]\n      (sqlite/execute-one! db [\"insert into metadata(uid,var,type) values(?,?,?)\" (str aid) (symbol fvar) \"activity\"]))\n\n    ;; persist runtime evts\n    (save-workflow-event [this wid runid etype data]\n      (persist-event db wid runid {:type etype :uid wid :payload data}))\n    (save-activity-event [this wid runid aid etype data]\n      (persist-event db wid runid {:type etype :uid aid :payload data}))))\n"]}