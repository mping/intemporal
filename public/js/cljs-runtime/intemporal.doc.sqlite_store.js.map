{"version":3,"sources":["intemporal/doc/sqlite_store.cljc"],"mappings":"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","names":["intemporal.doc.sqlite-store/serialize","obj","cljs.core.pr_str","intemporal.doc.sqlite-store/deserialize","s","clojure.edn.read_string","p__36360","map__36361","cljs.core/--destructure-map","cljs.core.get","intemporal.doc.sqlite-store/persist-event","db","_wid","runid","type","uid","payload","evt","query","intemporal.doc.sqlite/execute-one!","js/Date","p__36370","map__36375","intemporal.doc.sqlite-store/event->event-map","id","_run","deleted","timestamp","dbevt","cljs.core.keyword","cljs.core.symbol","intemporal.doc.sqlite-store/truncate","table","cljs.core._EQ_","cljs.core/name","cljs.core.ex_info","intemporal.doc.sqlite-store/resolve'","intemporal.doc.sqlite-store/make-sqlite-store","js/intemporal","js/intemporal.doc","js/intemporal.doc.sqlite-store","js/intemporal.doc.sqlite-store.t_intemporal$doc$sqlite_store36427","intemporal.doc.sqlite-store/t_intemporal$doc$sqlite_store36427","_36429","meta36428","cljs.core/PROTOCOL_SENTINEL","p__36469","map__36470","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","intemporal.doc.sqlite-store/->t_intemporal$doc$sqlite_store36427","this","temp__5804__auto__","map__36458","map__36461","var","map__36466","map__36467","events","intemporal.doc.sqlite/execute!","cljs.core.mapv","all?","map__36471","map__36472","eventsq","cljs.core.comp","cljs.core/parse-uuid","wid","evtid","all-events","e","cljs.core.assoc","sb__5690__auto__","goog.string/StringBuffer","*print-newline*-orig-val__36446","cljs.core/*print-newline*","*print-fn*-orig-val__36447","cljs.core/*print-fn*","*print-newline*-temp-val__36448","*print-fn*-temp-val__36449","x__5691__auto__","cljs.pprint.print_table","*print-newline*-orig-val__36477","*print-fn*-orig-val__36478","*print-newline*-temp-val__36479","*print-fn*-temp-val__36480","fvar","aid","etype","data"],"sourcesContent":["(ns intemporal.doc.sqlite-store\n  (:require [clojure.edn :as edn]\n            [clojure.pprint :as pprint]\n            [intemporal.doc.sqlite :as sqlite]\n            [intemporal.store :as s]))\n\n\n(defn- serialize [obj]\n  (pr-str obj))\n\n(defn- deserialize [s]\n  (edn/read-string s))\n\n(defn- persist-event [db _wid runid {:keys [type uid payload] :as evt}]\n  (let [query (str \"insert into events \"\n                   \"(runid, type, uid, payload, deleted, timestamp)\"\n                   \"values (?, ?, ?, ?, ?, ?)\")]\n    (sqlite/execute-one! db [query (str runid) (serialize type) uid (serialize payload) false (.toUTCString (js/Date.))])))\n\n(defn event->event-map [{:keys [id _run type uid payload deleted timestamp] :as dbevt}]\n  (when (some? dbevt)\n    {:id        id\n     :type      (keyword (.substring type 1))\n     :uid       (symbol uid)\n     :payload   (deserialize payload)\n     :timestamp (js/Date. timestamp)\n     :deleted?  (not (or (nil? deleted) (zero? deleted)))}))\n\n\n(defn- truncate [db table]\n  (cond\n    (= \"metadata\" (name table)) (sqlite/execute-one! db [\"delete from metadata\"])\n    (= \"events\" (name table)) (sqlite/execute-one! db [\"delete from events\"])\n    :else (throw (ex-info (str \"Unknown table: \" table) {}))))\n\n(defn resolve' [s]\n  ;; TODO fixme\n  s)\n\n;; adapted from intemporal.store.sql\n(defn- make-sqlite-store [db]\n  (reify\n    cljs.core/IDeref\n    (-deref [this] this)\n\n    s/WorkflowStore\n    (id [this]\n      \"sqlite-store\")\n    (clear [this]\n      (truncate db :metadata)\n      (truncate db :events))\n\n    ;; main stuff\n    (find-workflow [this runid]\n      (when-let [{uid  :uid\n                  type :type} (sqlite/execute-one! db [\"select uid,type from events where runid=? order by timestamp asc limit 1\" (str runid)])]\n        (let [{var :metadata/var} (sqlite/execute-one! db [\"select var from metadata where type=? and uid=?\" \"workflow\" uid])]\n          [(symbol uid) (resolve' (symbol var))])))\n\n    ;; queries\n    (find-workflow-run [this runid]\n      \n      (when-let [{uid  :uid\n                  type :type} (sqlite/execute-one! db [\"select uid,type from events where runid=? order by timestamp asc limit 1\" (str runid)])]\n        (let [{var :metadata/var} (sqlite/execute-one! db [\"select var from metadata where type=? and uid=?\" \"workflow\" uid])\n              events (sqlite/execute! db [\"select * From events where runid=?\" (str runid)])]\n          {:workflow        (resolve' (symbol var))\n           :workflow-events (mapv event->event-map events)})))\n\n    (find-workflow-run [this runid {:keys [all?] :or {all? true}}]\n      \n      (when-let [{uid  :uid\n                  type :type} (sqlite/execute-one! db [\"select uid,type from events where runid=? order by timestamp asc limit 1\" (str runid)])]\n        (let [{var :metadata/var} (sqlite/execute-one! db [\"select var from metadata where type=? and uid=?\" \"workflow\" uid])\n              eventsq (if all?\n                        \"select * From events where runid=?\"\n                        \"select * From events where runid=? and (deleted is false or deleted is null)\")\n              events  (sqlite/execute! db [eventsq (str runid)])]\n          {:workflow        (resolve' (symbol var))\n           :workflow-events (mapv event->event-map events)})))\n    (list-workflow-runs [this]\n      (->> (sqlite/execute! db [\"select distinct runid from events\"])\n           (mapv (comp parse-uuid :runid))))\n    (list-workflow-runs [this wid]\n      (->> (sqlite/execute! db [\"select distinct runid from events where uid=?\" (str wid)])\n           (mapv (comp parse-uuid :runid))))\n\n    ;; event handling\n    (clear-events [this]\n      (truncate db :events))\n    (next-event [this wid runid]\n      (->> (sqlite/execute-one! db [(str \"select * from events where runid=? and (deleted is false or deleted is null) \"\n                                         \"order by id asc limit 1\")\n                                    (str runid)])\n           (event->event-map)))\n    (next-event [this wid runid evtid]\n      (->> (sqlite/execute-one! db [(str \"select * from events where runid=? and (deleted is false or deleted is null) \"\n                                         \"and id > ? order by id asc limit 1\")\n                                    (str runid) evtid])\n           (event->event-map)))\n    (expunge-events [this wid runid evtid]\n      ;; soft delete from workflow events\n      ;; where id > evtid\n      (sqlite/execute! db [\"update events set deleted=true where runid=? and id > ?\" (str runid) evtid]))\n\n    (events->table [this]\n      (let [all-events (->> (sqlite/execute! db [\"select * from events order by runid asc, timestamp asc\"])\n                            (mapv (fn [e] (assoc e :payload (deserialize (:payload e))))))]\n        (with-out-str\n          (pprint/print-table all-events))))\n    (registrations->table [this]\n      (with-out-str\n        (pprint/print-table (sqlite/execute! db [\"select * from metadata\"]))))\n\n\n    ;; metadata\n    (save-workflow-definition [this wid fvar]\n      (sqlite/execute-one! db [\"insert into metadata(uid,var,type) values(?,?,?)\" (str wid) (symbol fvar) \"workflow\"]))\n\n    (save-activity-definition [this aid fvar]\n      (sqlite/execute-one! db [\"insert into metadata(uid,var,type) values(?,?,?)\" (str aid) (symbol fvar) \"activity\"]))\n\n    ;; persist runtime evts\n    (save-workflow-event [this wid runid etype data]\n      (persist-event db wid runid {:type etype :uid wid :payload data}))\n    (save-activity-event [this wid runid aid etype data]\n      (persist-event db wid runid {:type etype :uid aid :payload data}))))\n"]}