{"version":3,"sources":["intemporal/store.cljc"],"mappings":"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","names":["intemporal$store$TaskStore$list_tasks$dyn","x__5393__auto__","m__5394__auto__","intemporal.store/list-tasks","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","intemporal$store$TaskStore$apply_fn_event$dyn","intemporal.store/apply-fn-event","intemporal$store$TaskStore$watch_tasks$dyn","intemporal.store/watch-tasks","intemporal$store$TaskStore$await_task$dyn","intemporal.store/await-task","var_args","G__28955","js/Error","intemporal$store$TaskStore$matching_task$dyn","intemporal.store/matching-task","intemporal$store$TaskStore$reenqueue_pending_tasks$dyn","intemporal.store/reenqueue-pending-tasks","intemporal$store$TaskStore$enqueue_task$dyn","intemporal.store/enqueue-task","intemporal$store$TaskStore$dequeue_task$dyn","intemporal.store/dequeue-task","intemporal.store/TaskStore","this","id","details","predicate","callback","opts","task","intemporal$store$HistoryStore$list_events$dyn","intemporal.store/list-events","intemporal$store$HistoryStore$save_event$dyn","intemporal.store/save-event","intemporal$store$HistoryStore$all_events$dyn","intemporal.store/all-events","G__28957","intemporal.store/HistoryStore","event","last-event-id","intemporal$store$InternalVarStore$register$dyn","intemporal.store/register","intemporal$store$InternalVarStore$lookup$dyn","intemporal.store/lookup","intemporal.store/InternalVarStore","sym","var","intemporal.store/now","js/Date","p__28958","map__28959","cljs.core/--destructure-map","cljs.core.get","intemporal.store/sym->var","store","fvar","or__5045__auto__","intemporal.store/read-edn","file","readers","f","js/window","cljs.tools.reader.edn.read_string","intemporal.store/write-edn","val","cljs.core.pr_str","intemporal.store/edn-exists?","cljs.core/seq","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","intemporal.store/ResultOK","intemporal.store/->ResultOK","ok","intemporal.store/ResultError","intemporal.store/->ResultError","err","G__28967","intemporal.store/make-memstore","intemporal.store.make_memstore","tasks","cljs.core.atom","history","counter","pcounter","ecounter","vars","persist!","_","e28968","cljs.core/deref","e","js/console.error","find-task","update-task","kvs","temp__5804__auto__","w","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.apply","cljs.core/add-watch","data","cljs.core/reset!","js/intemporal","js/intemporal.store","js/intemporal.store.t_intemporal$store28969","intemporal.store/t_intemporal$store28969","_28971","meta28970","cljs.core/PROTOCOL_SENTINEL","p__28972","map__28973","p__28974","map__28975","intemporal.store/->t_intemporal$store28969","cljs.core/concat","cljs.core/vals","evt+id","cljs.core.assoc","cljs.core/inc","v","cljs.core.conj","evts","p1__28960#","cljs.core.filter","ref","root","type","args","result","error","evt","ks","match?","cljs.core/select-keys","p1__28961#","cljs.core._EQ_","cljs.core/first","k","cljs.core.keyword","watchfn","atm","old","new","matches","changeset","p1__28962#","cljs.core.not_EQ_","p1__28963#","cljs.core/run!","cljs.core/remove-watch","timeout-ms","deferred","promesa.core/deferred","completed?","p__28976","map__28977","state","wrap-result","p__28978","map__28979","cljs.core.ex_info","p1__28964#","pred","promesa.core.resolve_BANG_","promesa.core.timeout","promesa.core.then","resolved","wrapped","cljs.core/update-vals","p__28980","map__28981","G__28982","first-new","p1__28965#","found?","cljs.core.swap_vals_BANG_","found"],"sourcesContent":["(ns intemporal.store\n  (:require [clojure.tools.reader.edn :as edn]\n            [promesa.core :as p]\n            #?(:clj [clojure.java.io :as io]\n               :cljs [cljs.core :refer [IDeref]]))\n  #?(:clj (:import [clojure.lang IDeref]\n                   [java.io File])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;;;;\n;; main protos\n\n(defprotocol TaskStore\n  (list-tasks [this] \"Lists all tasks\")\n  (apply-fn-event [this id details]\n    \"Transitions the task. The task should be dequeued beforehand. Returns the event.\n    `details` is one of:\n    `{:sym 'ns/f :args [1]}`\n    `{:sym 'ns/f :result :ok}`\n    `{:sym 'ns/f :error <some error>}`\n    \")\n  (watch-tasks [this predicate callback]\n    \"Observes state changes, calling `callback` for any task that matches `predicate`. Returns a function to cancel the observation.\")\n  (await-task [this id] [this id opts]\n    \"Waits for workflow to finish. Returns a deref'able value. Can throw.\n    Opts include\n    - `timeout-ms`: timeout for task await\")\n  (matching-task [this task]\n    \"Finds the matching task on the db, comparing the following tuple: `:ref :root :type :sym :args`\")\n  (reenqueue-pending-tasks [this callback]\n    \"Marks all pending tasks as `new`\")\n  (enqueue-task [this task]\n    \"Enqueues a workflow or activity execution\")\n  (dequeue-task [this]\n    \"Dequeues some workflow, protocol or activity execution. If the task was deserialized, `fvar` attribute must be a `fn`\"))\n\n(defprotocol HistoryStore\n  (list-events [this] \"Lists all events\")\n  (save-event [this id event] \"Saves the event for the given workflow id. Returns the saved event\")\n  (all-events [this id] [this id last-event-id] \"Returns all the eventsf for a given workflow id, optionall after `last-event-id`\"))\n\n(defprotocol InternalVarStore\n  (register [this sym var] \"Register the symbol with the var\")\n  (lookup [this sym] \"Finds the var for the given symbol\"))\n\n;;;;\n;; helpers\n\n#_:clj-kondo/ignore\n(defn- now []\n  #?(:clj  (System/currentTimeMillis)\n     :cljs (.getTime (js/Date.))))\n\n(defn- sym->var [store {:keys [sym fvar] :as task}]\n  #?(:clj  (or fvar (requiring-resolve sym))\n     :cljs (or fvar (lookup store sym))))\n\n(defn- read-edn [file readers]\n  #?(:clj  (with-open [f (io/reader file)]\n             (edn/read-string {:readers readers} (slurp f)))\n     :cljs (let [f (.getItem (.-localStorage js/window) file)]\n             (edn/read-string {:readers readers} f))))\n\n(defn- write-edn [file val]\n  #?(:clj  (spit file val)\n     :cljs (.setItem (.-localStorage js/window) file (pr-str val))))\n\n(defn- edn-exists? [file]\n  #?(:clj  (.exists (File. ^String file))\n     :cljs (seq (.getItem (.-localStorage js/window) file))))\n\n\n(deftype ResultOK [ok]\n  IDeref\n  (#?(:clj deref :cljs -deref) [this] ok))\n\n(deftype ResultError [err]\n  IDeref\n  (#?(:clj deref :cljs -deref) [this] (throw err)))\n\n;;;;\n;; main impl\n\n(defn make-memstore\n  ([]\n   (make-memstore nil nil))\n  ([file readers]\n   ;; TODO use single atom?\n   (let [tasks       (atom {})\n         history     (atom {})\n         counter     (atom 0)\n         pcounter    (atom 0)\n         ecounter    (atom 0)\n         vars        (atom {})\n\n         ;;persistence\n         persist!    (fn [_ _ _ _] (when file\n                                     (try\n                                       (write-edn file {:tasks    @tasks\n                                                        :history  @history\n                                                        :counter  @counter\n                                                        :pcounter @pcounter\n                                                        :ecounter @ecounter})\n                                       (catch #?(:clj Exception :cljs js/Error) e\n                                         #?(:clj  (.printStackTrace e)\n                                            :cljs (js/console.error e))))))\n\n         find-task   (fn [this id]\n                       (get @tasks id))\n\n         update-task (fn [this id & kvs]\n                       (when-let [w (find-task this id)]\n                         (swap! tasks assoc id (apply assoc w kvs))))]\n\n     ;; deser the db\n     (when file\n       ;; add hooks to persist on change\n       (add-watch tasks :persist persist!)\n       (add-watch history :persist persist!)\n       (add-watch counter :persist persist!)\n       (add-watch pcounter :persist persist!)\n       (add-watch ecounter :persist persist!)\n\n       (when (edn-exists? file)\n         (let [data (read-edn file readers)]\n           (reset! tasks (:tasks data))\n           (reset! history (:history data))\n           (reset! counter (:counter data))\n           (reset! pcounter (:pcounter data))\n           (reset! ecounter (:ecounter data)))))\n\n     (reify\n       IDeref\n       (#?(:clj deref :cljs -deref) [this] {::task-store    tasks\n                                            ::history-store history})\n\n       InternalVarStore\n       (register [this sym var]\n         #?(:cljs (swap! vars assoc sym var)))\n       (lookup [this sym]\n         #?(:clj (requiring-resolve sym)\n            :cljs (get @vars sym)))\n\n       HistoryStore\n       (list-events [this]\n         (apply concat (vals @history)))\n       (save-event [this id event]\n         (let [evt+id (assoc event :id (swap! counter inc))]\n           (swap! history (fn [v]\n                            (assoc v id (-> (or (get v id) [])\n                                            (conj evt+id)))))\n           evt+id))\n       (all-events [this id]\n         (get @history id))\n       (all-events [this id last-event-id]\n         (when-let [evts (get @history id)]\n           (filter #(> (:id %) last-event-id) evts)))\n\n       TaskStore\n       (list-tasks [this]\n         (vals @tasks))\n\n       (apply-fn-event [this id {:keys [ref root type sym args result error]}]\n         ;; some redundancy between :result in task and event\n         (cond\n           (some? args)\n           (let [evt {:ref ref :root root :type type :sym sym :args args}]\n             (update-task this id :state :pending)\n             (save-event this id evt))\n\n           (some? error)\n           (let [evt {:ref ref :root root :type type :sym sym :error error}]\n             (update-task this id :state :failure :result error)\n             (save-event this id evt))\n\n           ;;(some? result) ;result can be nil\n           :else\n           (let [evt {:ref ref :root root :type type :sym sym :result result}]\n             (update-task this id :state :success :result result)\n             (save-event this id evt))))\n\n       (matching-task [this task]\n         (let [ks     [:ref :root :type :sym :args]\n               match? (select-keys task ks)]\n           (->> (vals @tasks)\n                (filter #(= (select-keys % ks) match?))\n                (first))))\n\n       (watch-tasks [this predicate f]\n         (let [k       (keyword (str \"watcher-\" (swap! pcounter inc)))\n               watchfn (fn [k atm old new]\n                         ;; todo: xf\n                         (let [matches   (filter predicate (vals new))\n                               changeset (filter #(not= (get old (:id %)) %) matches)]\n                           (when (seq changeset)\n                             (run! #(f %) changeset))))]\n           ;; add a watch but run at least once\n           (add-watch tasks k watchfn)\n           (run! f (filter predicate (vals @tasks)))\n           (fn [] (remove-watch tasks k))))\n\n       (await-task [this id]\n         (await-task this id {:timeout-ms 999999999}))\n\n       (await-task [this id {:keys [timeout-ms] :as opts}]\n         (let [task        (find-task this id)\n               deferred    (p/deferred)\n               completed?  (fn [{:keys [state]}]\n                             (or (= :success state)\n                                 (= :failure state)))\n               wrap-result (fn [{:keys [state result] :as task}]\n                             (cond\n                               (= :success state) (->ResultOK result)\n                               (= :failure state) (->ResultError result)\n                               :else (->ResultError (ex-info \"Unknown state\" {:task task}))))]\n\n           (if (completed? task)\n             (wrap-result task)\n             ;;else\n             (let [pred #(and (= (:id %) id)\n                              (or (= :success (:state %))\n                                  (= :failure (:state %))))]\n               (watch-tasks this pred (fn [task]\n                                        (p/resolve! deferred task)))\n               ;; wait for resolution\n               ;; remember: js doesnt have blocking op so we need to chain\n               (-> (p/timeout deferred timeout-ms ::timeout)\n                   (p/then (fn [resolved]\n                             (if (= ::timeout resolved)\n                               (throw (ex-info \"Timeout waiting for task to be completed\" {:task task}))\n                               (wrap-result resolved))))\n                   (p/then (fn [wrapped]\n                             ;; force throw to make it a reject promise in case we're running js\n                             (deref wrapped))))))))\n\n       (reenqueue-pending-tasks [this f]\n         (swap! tasks\n                update-vals\n                (fn [{:keys [state] :as task}]\n                  #_:clj-kondo/ignore\n                  (cond-> task\n                          (= :pending state) (do (f task)\n                                                 (assoc task :state :new))))))\n\n       (enqueue-task [this task]\n         (swap! tasks assoc (:id task) task)\n         #?(:cljs (register this (:sym task) (:fvar task)))\n         task)\n\n       (dequeue-task [this]\n         (let [first-new (fn [v] (->> (vals v)\n                                      (filter #(= :new (:state %)))\n                                      (first)))\n               found?    (atom nil)]\n           (swap-vals! tasks\n                       (fn [v] (let [found (first-new v)]\n                                 (if found\n                                   (->> (assoc found :state :pending :fvar (sym->var this found))\n                                        (reset! found?)\n                                        (assoc v (:id found)))\n                                   v))))\n           ;; highest first\n           (->> @found?)))))))\n"]}