{"version":3,"sources":["intemporal/error.cljc"],"mappings":";AAEA,yCAAA,zCAAMA,0FAAiBC;AAAvB,AACE,IAAAC,qBAAa,AAAA,kHAAA,kBAAID,lBAAGG;AAApB,AAAA,oBAAAF;AAAA,AAAA,QAAAA,JAAWC;AAAX,AACE,SAAI,6CAAA,7CAACE,0GAAYF,QACb,6CAAA,7CAACE,qGAASF;;AAFhB;;;AAIF,gCAAA,hCAAMG,wEAAQL;AAAd,AACE,SAAK,eAAmCM,dAAUN,0BAC7C,6CAAA,7CAACI,qGAAS,AAAA,kHAAA,kBAAIJ,lBAAGG;;AAExB,kCAAA,lCAAMI,4EAAgBC,IAAIC;AAA1B,AACE,OAACC,gDAAQF,IAAI,4GAAA,2CAAA,oFAAA,3OAACG,uGAAMF;;AAEtB,yBAAA,zBAAMG,0DAAOJ;AAAb,AACE,2DAAA,2CAAA,oFAAA,nLAACE,gDAAQF","names":["intemporal.error/internal-error?","ex","temp__5825__auto__","t","cljs.core/ex-data","cljs.core._EQ_","intemporal.error/panic?","js/Error","intemporal.error/internal-error","msg","data","cljs.core.ex_info","cljs.core.merge","intemporal.error/panic"],"sourcesContent":["(ns intemporal.error)\n\n(defn internal-error? [ex]\n  (when-let [t (-> ex ex-data ::type)]\n    (or (= :internal t)\n        (= :panic t))))\n\n(defn panic? [ex]\n  (and (instance? #?(:clj Exception :cljs js/Error) ex)\n       (= :panic (-> ex ex-data ::type))))\n\n(defn internal-error [msg data]\n  (ex-info msg (merge data {::type :internal})))\n\n(defn panic [msg]\n  (ex-info msg {::type :panic}))"]}